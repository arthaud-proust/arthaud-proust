---
import "@/assets/styles/components/cursor.sass";
---

<div id="cursor">
    <div class="pointer"></div>
    <div class="outer"></div>
</div>

<script>
    // Constants
    const DEBUG = false;
    const CURSOR_EL = document.getElementById("cursor")!;

    const STATES = Object.freeze({
        COVER_PAGE: "cover-page",
        HIDDEN: "hidden",
        TEXT: "text",
        SHOW_MORE: "show-more",
        SHOW_LESS: "show-less",
        ACTIVE: "active",
        ACTIVEABLE_X: "activeable-x",
        HOVER: "hover",
        NORMAL: "normal",
    } as const);

    const STATES_ORDER = [
        STATES.COVER_PAGE,
        STATES.HIDDEN,
        STATES.TEXT,
        STATES.SHOW_LESS,
        STATES.SHOW_MORE,
        STATES.ACTIVE,
        STATES.ACTIVEABLE_X,
        STATES.HOVER,
        STATES.NORMAL,
    ];

    const STATES_WHEN_HOVERING = {
        [STATES.HIDDEN]: [`[data-cursor="${STATES.HIDDEN}"]`],
        [STATES.NORMAL]: [`[data-cursor="${STATES.NORMAL}"]`],
        [STATES.HOVER]: [`[data-cursor="${STATES.HOVER}"]`, "a"],
        [STATES.TEXT]: [`[data-cursor="${STATES.TEXT}"]`],
        [STATES.SHOW_MORE]: [
            `[data-cursor="${STATES.SHOW_MORE}"]`,
            '[aria-expanded="false"]',
        ],
        [STATES.SHOW_LESS]: [
            `[data-cursor="${STATES.SHOW_LESS}"]`,
            '[aria-expanded="true"]',
        ],
        [STATES.ACTIVE]: [`[data-cursor="${STATES.ACTIVE}"]`],
        [STATES.ACTIVEABLE_X]: [
            `[data-cursor="${STATES.ACTIVEABLE_X}"]`,
            ".supercursor-activeable-x",
        ],
        [STATES.COVER_PAGE]: [`[data-cursor="${STATES.COVER_PAGE}"]`],
    };

    const LAYERS: Record<string, CursorLayer> = {
        pointer: {
            speed: 0.9,
            coef: 0,
            position: { x: 0, y: 0 },
            element: CURSOR_EL.querySelector(".pointer")!,
            update: {},
        },
        outer: {
            speed: 0.13,
            coef: 0.8,
            position: { x: 0, y: 0 },
            element: CURSOR_EL.querySelector(".outer")!,
            update: {
                [STATES.TEXT]: (layer) => {
                    const selectedHoveredElement = STATES_WHEN_HOVERING[
                        STATES.TEXT
                    ]
                        .map((selector) => elementHovered?.closest(selector))
                        .filter((element) => !!element)[0];

                    if (selectedHoveredElement) {
                        let text = "Voir";
                        if (
                            "title" in selectedHoveredElement &&
                            selectedHoveredElement.title &&
                            typeof selectedHoveredElement.title === "string"
                        ) {
                            text = selectedHoveredElement.title;
                        } else if (
                            "alt" in selectedHoveredElement &&
                            selectedHoveredElement.alt &&
                            typeof selectedHoveredElement.alt === "string"
                        ) {
                            text = selectedHoveredElement.alt;
                        }

                        CURSOR_EL.style.setProperty("--hoverText", `"${text}"`);
                    }
                    layer.element.style.left = layer.position.x + "px";
                    layer.element.style.top = layer.position.y + "px";
                },
                [STATES.HOVER]: (layer) => {
                    const selectedHoveredElement = STATES_WHEN_HOVERING[
                        STATES.HOVER
                    ]
                        .map((selector) => elementHovered?.closest(selector))
                        .filter((element) => !!element)[0];

                    if (selectedHoveredElement) {
                        let hvrElCoords =
                            selectedHoveredElement.getBoundingClientRect();

                        layer.position = updatedLayerDisplacement(layer, {
                            x: hvrElCoords.left + hvrElCoords.width / 2,
                            y: hvrElCoords.top + hvrElCoords.height / 2,
                        });

                        layer.element.style.width = `calc(${hvrElCoords.width}px + var(--hoverPadding))`;
                        layer.element.style.height = `calc(${hvrElCoords.height}px + var(--hoverPadding))`;
                    }
                    layer.element.style.left = layer.position.x + "px";
                    layer.element.style.top = layer.position.y + "px";
                },
            },
        },
    };

    // Types
    type CursorState = (typeof STATES)[keyof typeof STATES];
    type CursorMode = "mouse" | "touch";
    type MousePosition = {
        x: number;
        y: number;
        velocity: number;
        direction: {
            x: number;
            y: number;
        };
        movedAt: number;
    };
    type CursorLayer = {
        speed: number;
        coef: number;
        element: HTMLElement;
        position: {
            x: number;
            y: number;
        };
        update: Partial<Record<CursorState, (layer: CursorLayer) => void>>;
    };

    // Variables
    let elementHovered: Element | null = null;
    let state: CursorState = STATES.SHOW_LESS;
    const mouse: MousePosition = {
        x: window.innerWidth / 2,
        y: window.innerHeight / 2,
        velocity: 0,
        direction: {
            x: 0,
            y: 0,
        },
        movedAt: 0,
    };

    // Functions
    const updateLayerNormal = (layer: CursorLayer) => {
        layer.element.style.removeProperty("width");
        layer.element.style.removeProperty("height");
        layer.element.style.left = layer.position.x + "px";
        layer.element.style.top = layer.position.y + "px";
    };

    const distanceBetweenLayerAndMouse = (
        layer: CursorLayer,
        mouse: { x: number; y: number }
    ) => ({
        x: mouse.x - layer.position.x,
        y: mouse.y - layer.position.y,
    });

    const updatedLayerPosition = (
        layer: CursorLayer,
        mouse: { x: number; y: number }
    ) => {
        const dist = distanceBetweenLayerAndMouse(layer, mouse);

        return {
            x: layer.position.x + dist.x * layer.speed,
            y: layer.position.y + dist.y * layer.speed,
        };
    };

    const updatedLayerDisplacement = (
        layer: CursorLayer,
        mouse: { x: number; y: number }
    ) => {
        const dist = distanceBetweenLayerAndMouse(layer, mouse);

        return {
            x: layer.position.x + dist.x * layer.coef,
            y: layer.position.y + dist.y * layer.coef,
        };
    };

    const updateLayer = (layer: CursorLayer) =>
        (layer.update[state] ?? updateLayerNormal)(layer);

    const useMode = (newMode: CursorMode) => {
        CURSOR_EL.dataset.mode = newMode;

        Object.values(LAYERS).forEach((layer) => {
            layer.position.x = mouse.x;
            layer.position.y = mouse.y;
        });
        animate();
    };

    const setState = (newState: CursorState) => {
        if (newState === state) return;

        CURSOR_EL.dataset.state = newState;
        state = newState;
        console.log(`Cursor: ${state}`);
    };

    const enable = () => {
        console.log("Cursor: enable");

        setState(STATES.NORMAL);

        Object.values(LAYERS).forEach((layer) => {
            layer.position.x = mouse.x;
            layer.position.y = mouse.y;
        });

        animate();
    };

    const disable = () => {
        console.log("Cursor: disable");

        setState(STATES.HIDDEN);
    };

    const animate = () => {
        if (state === STATES.HIDDEN) return;

        let nextState: CursorState | null = null;
        elementHovered = document.elementFromPoint(mouse.x, mouse.y);

        if (elementHovered) {
            STATES_ORDER.forEach((state) => {
                if (nextState) return;

                for (let selector of STATES_WHEN_HOVERING[state]) {
                    const shouldChange = elementHovered?.closest(selector);

                    if (shouldChange) {
                        nextState = state as CursorState;
                        return;
                    }
                }
            });
        }

        if (state !== STATES.ACTIVE && state !== STATES.COVER_PAGE) {
            setState(nextState ?? STATES.NORMAL);
        }

        Object.values(LAYERS).forEach((layer) => {
            layer.position = updatedLayerPosition(layer, mouse);
            updateLayer(layer);
        });

        requestAnimationFrame(animate);
    };

    const move = ({ x, y }: { x: number; y: number }, movedAt: number) => {
        if (state === STATES.HIDDEN) return;

        const { x: oldX, y: oldY } = mouse;

        mouse.x = x;
        mouse.y = y;
        const dist = Math.sqrt(
            Math.pow(Math.abs(oldX - x), 2) + Math.pow(Math.abs(oldY - y), 2)
        );
        const time = movedAt - mouse.movedAt;

        mouse.direction.x = oldX === x ? 0 : oldX > x ? -1 : 1;
        mouse.direction.y = oldY === y ? 0 : oldY > y ? -1 : 1;

        mouse.velocity = (dist / time) * 1000;
    };

    const isTouch = () => {
        let check = false;
        (function (a) {
            if (
                /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(
                    a
                ) ||
                /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                    a.substr(0, 4)
                )
            ) {
                check = true;
            }
            //@ts-ignore
        })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
    };

    // Setup
    CURSOR_EL.dataset.debug = `${DEBUG}`;
    useMode(isTouch() ? "touch" : "mouse");

    document.addEventListener("mouseleave", () => disable());

    document.addEventListener("mouseenter", () => enable());

    document.addEventListener("mousemove", (event) =>
        move({ x: event.clientX, y: event.clientY }, event.timeStamp)
    );
</script>
